// Async patterns - Promises
const {readFile, writeFile} = require('fs')
const util = require('util')
 
const readFilePromise = util.promisify(readFile)
const writeFilePromise = util.promisify(writeFile)

const start = async()=>{
    const first = await readFilePromise('./Content/first.txt', 'utf8')
    const second = await readFilePromise('./Content/second.txt', 'utf8')
    console.log(first, second)    
    await writeFilePromise('./Content/result.txt', 'This is regarding Promise using promisify', {flag: 'a'})
    
    

    //const second = getText('./Content/second.txt')
    //second.then(result => console.log(result))
}

start()


// const getText = (path) => {
//     return new Promise((resolve, reject)=>{
//         readFile(path, 'utf-8', (err, data)=>{
//             if(err){
//                 reject(err)
//             }
//             resolve(data)
//         })
//     })
// }


//console.log(getText('./Content/first.txt')) // Promise is pending.
// getText('./Content/first.txt')
// .then(result => console.log(result))
// .catch(err => console.log(err))
